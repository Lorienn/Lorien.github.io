<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夏心瑶的个人网站</title>
  <icon>https://www.gravatar.com/avatar/b89a5bd071c8f1d053e27ac4b915015d</icon>
  <subtitle>Lorien&#39;s Web</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lorien.github.io/"/>
  <updated>2020-08-14T12:43:01.051Z</updated>
  <id>https://lorien.github.io/</id>
  
  <author>
    <name>夏心瑶</name>
    <email>lorienn@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React开发规范</title>
    <link href="https://lorien.github.io/2020/08/14/react-standard/"/>
    <id>https://lorien.github.io/2020/08/14/react-standard/</id>
    <published>2020-08-14T12:34:48.000Z</published>
    <updated>2020-08-14T12:43:01.051Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组件的定义"><a href="#组件的定义" class="headerlink" title="组件的定义"></a>组件的定义</h2><ol><li><p>需要管理内部状态/涉及生命周期，使用class（类组件）</p></li><li><p>否则优先使用普通函数（函数组件）</p></li></ol><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><ul><li>规则：帕斯卡命名法</li><li>文件名<ul><li>目录的根组件：<code>index.jsx</code></li><li>其它：<code>MyComponent.jsx</code></li></ul></li><li>引用组件名：<code>const MyComponent = require(&#39;./List&#39;)</code></li><li>属性名<ul><li>规则：驼峰式</li><li>例：<code>&lt;Index firstName=&quot;foo&quot;&gt;</code></li></ul></li></ul><h2 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Index</span><br><span class="line">  config=<span class="string">&quot;foo&quot;</span></span><br><span class="line">  second=<span class="string">&quot;bar&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h2 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h2><ul><li><p>在JSX中应使用<code>&quot;&quot;</code></p></li><li><p>在JS中应使用<code>&#39;&#39;</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Index name=<span class="string">&quot;EvanYou&quot;</span> style=&#123;&#123;<span class="attr">left</span>: <span class="string">&#x27;20px&#x27;</span>&#125;&#125; /&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><ul><li>标签闭合：标签名和<code>/</code>中保留一个空格     <code>&lt;Index /&gt;</code></li><li>插值表达式：插值括号和内容之间不应该有空格     <code>&lt;Index style=&#123;styleObj&#125;&gt;</code></li></ul><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PropTypes &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> propTypes = &#123;</span><br><span class="line">  id: PropTypes.number.isRequired,</span><br><span class="line">  text: PropTypes.string</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> defaultProps = &#123;</span><br><span class="line">  text: <span class="string">&#x27;hello, world!&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">component</span> </span>&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;index&quot;</span>&gt;&#123;<span class="built_in">this</span>.props.text&#125;&lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">App.propTypes = propTypes</span><br><span class="line">App.defaultTypes = propTypes</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;组件的定义&quot;&gt;&lt;a href=&quot;#组件的定义&quot; class=&quot;headerlink&quot; title=&quot;组件的定义&quot;&gt;&lt;/a&gt;组件的定义&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;需要管理内部状态/涉及生命周期，使用class（类组件）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;否则优
      
    
    </summary>
    
    
    
      <category term="React" scheme="https://Lorien.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React Hook</title>
    <link href="https://lorien.github.io/2020/08/14/react-hook/"/>
    <id>https://lorien.github.io/2020/08/14/react-hook/</id>
    <published>2020-08-14T12:34:37.000Z</published>
    <updated>2020-08-14T12:42:57.709Z</updated>
    
    <content type="html"><![CDATA[<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>只能在函数式组件中使用</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>使函数式组件拥有状态、生命周期等类组件的特性</p><h4 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h4><ul><li><p>state hook</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; form <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// useState 方法返回一个数组。第一个值是当前的 state，第二个值是更新 state 的函数，相当于类组件的setState</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [data, setData] = useState(&#123;</span><br><span class="line">        name: <span class="string">&#x27;xxy&#x27;</span>,</span><br><span class="line">        age: <span class="number">10</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;</span><br><span class="line">            &lt;button onClick=&#123;<span class="function">() =&gt;</span> setData(&#123; ...data, <span class="attr">age</span>: data.age + <span class="number">1</span> &#125;)&#125;&gt;点我加<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 【注意】setData的使用分两种情况：</span></span><br><span class="line"><span class="comment"> * 1.为该状态赋新的值</span></span><br><span class="line"><span class="comment"> * 2.在原状态的基础上进行修改。此时setData接收一个参数data，表示原来的状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> setData(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"> setData(<span class="function"><span class="params">data</span> =&gt;</span> [...data, text])</span><br><span class="line"> setData(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">const</span> arr = [...data]</span><br><span class="line">     arr.splice(i, <span class="number">1</span>)</span><br><span class="line">     <span class="keyword">return</span> arr</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></li><li><p>effect hook</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">/* useEffect第一个参数为处理函数,在。函数返回值(如果有)在组件销毁时调用;</span></span><br><span class="line"><span class="comment"> * 第二个参数（可选）是数组</span></span><br><span class="line"><span class="comment">     1.若不传，则函数在初次渲染和每次更新后都会调用，相当于componentDidUpdate</span></span><br><span class="line"><span class="comment">     2.若为[var],当var发生变化时才会触发useEffect，相当于watch</span></span><br><span class="line"><span class="comment">     3.若为[]，则函数只在组件挂载和卸载时调用，相当于componentDidMount</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">    useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;componentDidMount...&#x27;</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;componentDidUpdate...&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;componentWillUnmount...&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;点我加1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h4&gt;&lt;p&gt;只能在函数式组件中使用&lt;/p&gt;
&lt;h4 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用
      
    
    </summary>
    
    
    
      <category term="React" scheme="https://Lorien.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Vue开发规范</title>
    <link href="https://lorien.github.io/2020/08/14/vue-standard/"/>
    <id>https://lorien.github.io/2020/08/14/vue-standard/</id>
    <published>2020-08-14T12:32:43.000Z</published>
    <updated>2020-08-14T12:43:10.006Z</updated>
    
    <content type="html"><![CDATA[<h4 id="组件划分"><a href="#组件划分" class="headerlink" title="组件划分"></a>组件划分</h4><ul><li>情况<ul><li>App组件代码超过100行</li><li>使用了vue-router</li></ul></li><li>原则：尽量保证单文件组件代码不超过100行</li></ul><h4 id="组件命名"><a href="#组件命名" class="headerlink" title="组件命名"></a>组件命名</h4><ul><li>原则<ul><li>语义化</li><li>由2~3个单词组成</li><li>使用<code>-</code>分隔单词</li></ul></li></ul><h4 id="组件事件命名"><a href="#组件事件命名" class="headerlink" title="组件事件命名"></a>组件事件命名</h4><ul><li>原则<ul><li>同<strong>组件命名</strong></li><li>应以动词/名词结尾，例如<code>upload-success</code></li></ul></li></ul><h4 id="props"><a href="#props" class="headerlink" title="props"></a>props</h4><ul><li><p>尽量传递JS原始类型（String, Number, Boolean）和Function，避免传递对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 推荐 --&gt;</span><br><span class="line">&lt;range-slider</span><br><span class="line">  :values&#x3D;&quot;[10, 20]&quot;</span><br><span class="line">  :min&#x3D;&quot;0&quot;</span><br><span class="line">  :max&#x3D;&quot;100&quot;</span><br><span class="line">  :step&#x3D;&quot;5&quot;</span><br><span class="line">  @on-slide&#x3D;&quot;updateInputs&quot;</span><br><span class="line">  @on-end&#x3D;&quot;updateResults&quot;&gt;</span><br><span class="line">&lt;&#x2F;range-slider&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 避免 --&gt;</span><br><span class="line">&lt;range-slider :config&#x3D;&quot;complexConfigObject&quot;&gt;&lt;&#x2F;range-slider&gt;</span><br></pre></td></tr></table></figure></li><li><p>提供默认值，并使用<code>type</code>校验属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      id: &#123;</span><br><span class="line">        type: <span class="built_in">Number</span>,</span><br><span class="line">        <span class="keyword">default</span>() &#123; <span class="keyword">return</span> <span class="number">10</span>; &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      title: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        <span class="keyword">default</span>() &#123; <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>; &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      content: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        <span class="keyword">default</span>() &#123; <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>; &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="组件结构化"><a href="#组件结构化" class="headerlink" title="组件结构化"></a>组件结构化</h4><ul><li><p>属性顺序：<code>name,extends,props,data,computed,components,watch,methods,lifecycle methods</code></p></li><li><p>CSS使用BEM命名规范</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list</span> &#123;</span><br><span class="line">    <span class="selector-class">.list__item</span> &#123;</span><br><span class="line">        <span class="selector-class">.list__item--active</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;组件划分&quot;&gt;&lt;a href=&quot;#组件划分&quot; class=&quot;headerlink&quot; title=&quot;组件划分&quot;&gt;&lt;/a&gt;组件划分&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;情况&lt;ul&gt;
&lt;li&gt;App组件代码超过100行&lt;/li&gt;
&lt;li&gt;使用了vue-router&lt;/li&gt;
&lt;/u
      
    
    </summary>
    
    
    
      <category term="Vue" scheme="https://Lorien.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>我的开发笔记</title>
    <link href="https://lorien.github.io/2020/08/14/my-note/"/>
    <id>https://lorien.github.io/2020/08/14/my-note/</id>
    <published>2020-08-14T12:24:19.000Z</published>
    <updated>2020-08-14T12:34:24.090Z</updated>
    
    <content type="html"><![CDATA[<h4 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h4><p>在项目实际开发的过程中，可能会遇到许许多多的问题，在此做一个简单的记录。</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h4 id="1-元素特性的顺序"><a href="#1-元素特性的顺序" class="headerlink" title="1.元素特性的顺序"></a>1.元素特性的顺序</h4><blockquote><p>id,class,ref    节点标识</p><p>name,src,alt,type,href,value    必须的原生特性</p><p>placeholder    可选的原生特性</p><p>v-model,v-for,key,v-if,v-show,v-bind    vue指令</p></blockquote><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h4 id="1-PC端页面适配"><a href="#1-PC端页面适配" class="headerlink" title="1.PC端页面适配"></a>1.PC端页面适配</h4><blockquote><p>缩放页面时，背景和主体元素总是保持居中</p><p>实际宽度小于设计宽度时，根据主体元素宽度设置页面最小宽度</p><p>实际宽度大于设计宽度时，使用与背景色相近的纯色填充空白部分</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, </span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.index</span> &#123;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: url(~img/bg.jpg) no-repeat;</span><br><span class="line">    <span class="attribute">background-position</span>: center <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-class">.content</span> &#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="3-移动端伪类-active无效的解决方式"><a href="#3-移动端伪类-active无效的解决方式" class="headerlink" title="3.移动端伪类:active无效的解决方式"></a>3.移动端伪类:active无效的解决方式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">created () &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.addEventListener(<span class="string">&#x27;touchstart&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h4 id="1-获取对象的第一个属性"><a href="#1-获取对象的第一个属性" class="headerlink" title="1.获取对象的第一个属性"></a>1.获取对象的第一个属性</h4><ul><li><p>原理：JS的对象是基于哈希表实现的，理论上是无序的，但其存储结构是有序的</p></li><li><p>方法：使用<code>for...in</code>循环</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="string">&#x27;0722&#x27;</span>: &#123;...&#125;,</span><br><span class="line">    <span class="string">&#x27;0814&#x27;</span>: &#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj[key])    <span class="comment">// &#x27;0722&#x27;: &#123;...&#125;</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><h4 id="1-computed计算属性无法传参的解决方式"><a href="#1-computed计算属性无法传参的解决方式" class="headerlink" title="1.computed计算属性无法传参的解决方式"></a>1.computed计算属性无法传参的解决方式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    myOrder () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;0&#x27;</span> + num</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><h4 id="1-setState后获取更新后的状态"><a href="#1-setState后获取更新后的状态" class="headerlink" title="1.setState后获取更新后的状态"></a>1.setState后获取更新后的状态</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.setState(&#123;</span><br><span class="line">    isShow: <span class="literal">true</span></span><br><span class="line">&#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.state.isShow)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h4 id="1-git-commit的注释规范"><a href="#1-git-commit的注释规范" class="headerlink" title="1.git commit的注释规范"></a>1.git commit的注释规范</h4><blockquote><p>feat 新功能</p><p>fix 修补bug</p><p>docs 文档</p><p>style 格式</p><p>refactor 重构</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h4&gt;&lt;p&gt;在项目实际开发的过程中，可能会遇到许许多多的问题，在此做一个简单的记录。&lt;/p&gt;
&lt;h2 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot;
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://Lorien.github.io/tags/JavaScript/"/>
    
      <category term="HTML" scheme="https://Lorien.github.io/tags/HTML/"/>
    
      <category term="CSS" scheme="https://Lorien.github.io/tags/CSS/"/>
    
      <category term="Vue" scheme="https://Lorien.github.io/tags/Vue/"/>
    
      <category term="React" scheme="https://Lorien.github.io/tags/React/"/>
    
      <category term="Git" scheme="https://Lorien.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript实现常见排序算法</title>
    <link href="https://lorien.github.io/2020/08/14/js-sort/"/>
    <id>https://lorien.github.io/2020/08/14/js-sort/</id>
    <published>2020-08-14T12:22:06.000Z</published>
    <updated>2020-08-14T12:42:53.596Z</updated>
    
    <content type="html"><![CDATA[<p>本文实现的排序算法有：冒泡排序、选择排序、插入排序、希尔排序、快速排序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArrayList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 列表的属性</span></span><br><span class="line">    <span class="built_in">this</span>.array = []</span><br><span class="line">    <span class="comment">// 列表的方法</span></span><br><span class="line">    <span class="comment">// - 插入项</span></span><br><span class="line">    ArrayList.prototype.insert = <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.array.push(item)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// - 将列表以字符串形式返回</span></span><br><span class="line">    ArrayList.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.array.join(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 排序算法</span></span><br><span class="line">    <span class="comment">// - 冒泡排序</span></span><br><span class="line">    ArrayList.prototype.bubbleSort = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> length = <span class="built_in">this</span>.array.length</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; j; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.array[i] &gt; <span class="built_in">this</span>.array[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.swap(i, i + <span class="number">1</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// - 选择排序</span></span><br><span class="line">    ArrayList.prototype.selectionSort = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> length = <span class="built_in">this</span>.array.length</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> min = j</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = min + <span class="number">1</span>; i &lt; length; i++) &#123;    <span class="comment">// 从第二个元素，即arr[1]开始与arr[min]比较</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.array[i] &lt; <span class="built_in">this</span>.array[min]) &#123;</span><br><span class="line">                    min = i</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.swap(j, min)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// - 插入排序</span></span><br><span class="line">    ArrayList.prototype.insertionSort = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> length = <span class="built_in">this</span>.array.length</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> cur = <span class="built_in">this</span>.array[i]</span><br><span class="line">            <span class="keyword">var</span> j = i   <span class="comment">//  这里不用j = i - 1是因为其在不进行循环的情况会出错</span></span><br><span class="line">            <span class="keyword">while</span> (cur &lt; <span class="built_in">this</span>.array[j - <span class="number">1</span>] &amp;&amp; j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.array[j] = <span class="built_in">this</span>.array[j - <span class="number">1</span>]</span><br><span class="line">                j--</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.array[j] = cur</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// - 希尔排序</span></span><br><span class="line">    ArrayList.prototype.shellSort = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> length = <span class="built_in">this</span>.array.length</span><br><span class="line">        <span class="keyword">var</span> gap = length / <span class="number">2</span> | <span class="number">0</span>    <span class="comment">// 初始化增量gap</span></span><br><span class="line">        <span class="keyword">while</span> (gap &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 以gap作为间隔，对数据进行分组，组内进行插入排序</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = gap; i &lt; length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> cur = <span class="built_in">this</span>.array[i]</span><br><span class="line">                <span class="keyword">var</span> j = i</span><br><span class="line">                <span class="keyword">while</span> (cur &lt; <span class="built_in">this</span>.array[j - gap] &amp;&amp; j &gt; gap - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.array[j] = <span class="built_in">this</span>.array[j - gap]</span><br><span class="line">                    j -= gap</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">this</span>.array[j] = cur</span><br><span class="line">            &#125;</span><br><span class="line">            gap = gap / <span class="number">2</span> | <span class="number">0</span>   <span class="comment">// 按照N/2逐步减小增量</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// - 快速排序</span></span><br><span class="line">    ArrayList.prototype.quickSort = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.quick(<span class="number">0</span>, <span class="built_in">this</span>.array.length - <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// - 快速排序的递归函数</span></span><br><span class="line">    ArrayList.prototype.quick = <span class="function"><span class="keyword">function</span> (<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt;= right) <span class="keyword">return</span>  <span class="comment">// 结束条件</span></span><br><span class="line">        <span class="keyword">var</span> pivot = <span class="built_in">this</span>.median(left, right)     <span class="comment">// 获取枢纽</span></span><br><span class="line">        <span class="keyword">var</span> i = left    <span class="comment">// 左指针（默认指向首项）</span></span><br><span class="line">        <span class="keyword">var</span> j = right - <span class="number">1</span>   <span class="comment">// 右指针（默认指向倒数第二项）</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;     <span class="comment">// true =&gt; i &lt; j，修复了第一轮循环出现i=j的bug</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">this</span>.array[++i] &lt; pivot) &#123; &#125;  <span class="comment">// 左指针向右移动，直到找到大于枢纽的元素</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">this</span>.array[--j] &gt; pivot) &#123; &#125;   <span class="comment">// 右指针向左移动，直到找到小于枢纽的元素</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt;= j) &#123;</span><br><span class="line">                <span class="keyword">break</span>   <span class="comment">// 左指针和右指针重合时退出循环</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.swap(i, j)     <span class="comment">// 交换左右指针指向的元素</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.swap(i, right - <span class="number">1</span>)     <span class="comment">// 左指针i停留的位置即枢纽在序列中正确的位置</span></span><br><span class="line">        <span class="built_in">this</span>.quick(left, i - <span class="number">1</span>)     <span class="comment">// 对枢纽左边的序列再次进行快速排序</span></span><br><span class="line">        <span class="built_in">this</span>.quick(i + <span class="number">1</span>, right)    <span class="comment">// 对枢纽右边的序列再次进行快速排序</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// - 交换元素</span></span><br><span class="line">    ArrayList.prototype.swap = <span class="function"><span class="keyword">function</span> (<span class="params">m, n</span>) </span>&#123;</span><br><span class="line">        [<span class="built_in">this</span>.array[m], <span class="built_in">this</span>.array[n]] = [<span class="built_in">this</span>.array[n], <span class="built_in">this</span>.array[m]]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// - 获取中位数并作为枢纽返回（快速排序）</span></span><br><span class="line">    ArrayList.prototype.median = <span class="function"><span class="keyword">function</span> (<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> center = (left + right) / <span class="number">2</span> | <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.array[left] &gt; <span class="built_in">this</span>.array[center]) &#123;</span><br><span class="line">            <span class="built_in">this</span>.swap(left, center)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.array[left] &gt; <span class="built_in">this</span>.array[right]) &#123;</span><br><span class="line">            <span class="built_in">this</span>.swap(left, right)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.array[center] &gt; <span class="built_in">this</span>.array[right]) &#123;</span><br><span class="line">            <span class="built_in">this</span>.swap(center, right)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.swap(center, right - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.array[right - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用排序算法</span></span><br><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> ArrayList()</span><br><span class="line">list.insert(<span class="number">97</span>)</span><br><span class="line">list.insert(<span class="number">35</span>)</span><br><span class="line">list.insert(<span class="number">12</span>)</span><br><span class="line">list.insert(<span class="number">9</span>)</span><br><span class="line">list.insert(<span class="number">20</span>)</span><br><span class="line">list.insert(<span class="number">66</span>)</span><br><span class="line">list.insert(<span class="number">77</span>)</span><br><span class="line">list.insert(<span class="number">45</span>)</span><br><span class="line">list.insert(<span class="number">2</span>)</span><br><span class="line">list.insert(<span class="number">6</span>)</span><br><span class="line">list.quickSort()</span><br><span class="line">alert(list.toString())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文实现的排序算法有：冒泡排序、选择排序、插入排序、希尔排序、快速排序。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/sp
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://Lorien.github.io/tags/JavaScript/"/>
    
      <category term="算法" scheme="https://Lorien.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>我的Web项目汇总</title>
    <link href="https://lorien.github.io/2020/08/14/my-project/"/>
    <id>https://lorien.github.io/2020/08/14/my-project/</id>
    <published>2020-08-14T12:18:28.000Z</published>
    <updated>2020-08-14T13:43:04.432Z</updated>
    
    <content type="html"><![CDATA[<h2 id="欢聚时代"><a href="#欢聚时代" class="headerlink" title="欢聚时代"></a>欢聚时代</h2><ul><li><p>YY陪玩·年中金牌团队大赏专题页（PC）<a href="https://web.yy.com/pw_gh_cosme/index.html?actId=20200810">https://web.yy.com/pw_gh_cosme/index.html?actId=20200810</a></p></li><li><p>YY交友·豆荚明星赛专题页（PC）<a href="https://web.yy.com/bean_star/">https://web.yy.com/bean_star/</a></p></li><li><p>追玩app·云顶之弈赛事专题页（mobile）<a href="https://web.yy.com/ge_zw_kingofchess/august.html">https://web.yy.com/ge_zw_kingofchess/august.html</a></p></li><li><p>追玩app·七月导量活动专题页（mobile）<a href="https://web.yy.com/zw_migration/">https://web.yy.com/zw_migration/</a></p></li><li><p>追玩app·后台管理系统·游戏专区（PC）</p></li></ul><h2 id="在校"><a href="#在校" class="headerlink" title="在校"></a>在校</h2><ul><li><p>MyVue - 基于Vue.js的前端项目工程 <a href="https://github.com/Lorienn/myvue">https://github.com/Lorienn/myvue</a></p></li><li><p>天气通 - 基于Vue的移动端Web应用 <a href="https://github.com/Lorienn/Weather">https://github.com/Lorienn/Weather</a></p></li><li><p>一本日记 - 基于uni-app开发的微信小程序 <a href="https://github.com/Lorienn/one-daily">https://github.com/Lorienn/one-daily</a></p></li><li><p>猫眼电影数据可视化平台 - 基于Vue的PC端Web应用 <a href="https://github.com/Lorienn/maoyan-film">https://github.com/Lorienn/maoyan-film</a></p></li><li><p>Element管理系统 - 基于Vue的电商后台管理系统 <a href="https://github.com/Lorienn/ecommerce-management-system">https://github.com/Lorienn/ecommerce-management-system</a></p></li><li><p>小米商城 - 基于HTML+CSS+JavaScript的PC端Web网站 <a href="https://github.com/Lorienn/xiaomi">https://github.com/Lorienn/xiaomi</a></p></li><li><p>漫漫记单词 - 基于HTML+CSS+JavaScript的教育类Web应用</p></li><li><p>知乎·登录 - 纯HTML+CSS3实现的Web页面 <a href="https://github.com/Lorienn/zhihu">https://github.com/Lorienn/zhihu</a></p></li><li><p>Tick Tick - 基于Vue的to-do类移动端Web应用 <a href="https://github.com/Lorienn/Tick-Tick">https://github.com/Lorienn/Tick-Tick</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;欢聚时代&quot;&gt;&lt;a href=&quot;#欢聚时代&quot; class=&quot;headerlink&quot; title=&quot;欢聚时代&quot;&gt;&lt;/a&gt;欢聚时代&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;YY陪玩·年中金牌团队大赏专题页（PC）&lt;a href=&quot;https://web.yy.com/pw_gh
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>五分钟入门PHP5.6</title>
    <link href="https://lorien.github.io/2020/08/12/php5/"/>
    <id>https://lorien.github.io/2020/08/12/php5/</id>
    <published>2020-08-12T04:18:25.000Z</published>
    <updated>2020-08-14T13:40:27.011Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、入门"><a href="#一、入门" class="headerlink" title="一、入门"></a>一、入门</h2><h5 id="1-输出语句"><a href="#1-输出语句" class="headerlink" title="1.输出语句"></a>1.输出语句</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo echo();  <span class="comment">// 常用输出语句</span></span><br><span class="line">print_r();    <span class="comment">// 同上</span></span><br><span class="line">var_dump();   <span class="comment">// 输出时变量类型和值，用于代码调试</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：php的语法十分严格，每一条语句都必须以<strong>分号</strong>结束。<br><br /></p><h5 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$str = <span class="string">&quot;hello,world.&quot;</span>;  <span class="comment">//声明变量无需关键字</span></span><br></pre></td></tr></table></figure><blockquote><p>变量以$符号开头（引用变量时也要带上$）<br>变量名必须以字母或下划线开头<br>变量名只能由[0-9a-zA-Z\_]组成<br>变量名<strong>区分大小写</strong></p></blockquote><br /><h5 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3. 数据类型"></a>3. 数据类型</h5><p>String（字符串）, Integer（整型）, Float（浮点型）, Boolean（布尔型）, Array（数组）, Object（对象）, NULL（空值）<br> <br /></p><h5 id="4-字符串拼接"><a href="#4-字符串拼接" class="headerlink" title="4. 字符串拼接"></a>4. 字符串拼接</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JavaScript</span></span><br><span class="line">str = <span class="string">&quot;0&quot;</span> + <span class="string">&quot;1&quot;</span>;    <span class="comment">//字符串拼接</span></span><br><span class="line">str = <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>.`</span>;    <span class="comment">//模板字符串</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PHP</span></span><br><span class="line">$str = <span class="string">&quot;0&quot;</span>.<span class="string">&quot;1&quot;</span>;     <span class="comment">//字符串拼接</span></span><br><span class="line">$str = <span class="string">&quot;Hello, &#123;$name&#125;!&quot;</span>;    <span class="comment">//占位符</span></span><br></pre></td></tr></table></figure><br /><h5 id="5-分支语句"><a href="#5-分支语句" class="headerlink" title="5. 分支语句"></a>5. 分支语句</h5><p>if,switch,for语句以及函数定义皆同js<br><br /></p><h2 id="二、数组"><a href="#二、数组" class="headerlink" title="二、数组"></a>二、数组</h2><h5 id="1-分类"><a href="#1-分类" class="headerlink" title="1.分类"></a>1.分类</h5><ul><li><p><em>索引数组（下标为数字）</em></p><h6 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$cars = <span class="keyword">array</span>(<span class="string">&quot;大众&quot;</span>, <span class="string">&quot;宝马&quot;</span>, <span class="string">&quot;现代&quot;</span>);</span><br></pre></td></tr></table></figure><h6 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; count($cars); $i++)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;下标:&#123;$i&#125;，数据:&#123;$cars[$i]&#125;&lt;br /&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br /></li><li><p><em>关联数组（又名键值数组，下标为字符串，类似ES6的<strong>map</strong>数据类型）</em></p><h6 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$arr = <span class="keyword">array</span>(<span class="string">&quot;id&quot;</span> =&gt; <span class="number">1</span>, <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;晓明&quot;</span>, <span class="string">&quot;age&quot;</span> =&gt; <span class="string">&quot;30&quot;</span>);</span><br></pre></td></tr></table></figure><h6 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>($arr <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;下标:&#123;$key&#125;，数据:&#123;$value&#125;&lt;br /&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br /></li><li><p><em>全局数组</em><br>$_GET：通过get方法提交过来的所有数据<br>$_POST：通过get方法提交过来的所有数据</p><br /></li></ul><h5 id="2-方法"><a href="#2-方法" class="headerlink" title="2.方法"></a>2.方法</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">count(<span class="keyword">array</span>);   <span class="comment">//返回数组长度</span></span><br><span class="line">array_pop(<span class="keyword">array</span>);   <span class="comment">//从数组末尾取下一个元素</span></span><br><span class="line">array_push(<span class="keyword">array</span>, elements);     <span class="comment">//向数组末尾添加元素</span></span><br><span class="line">array_shift(<span class="keyword">array</span>);     <span class="comment">//从数组头部取下一个元素</span></span><br><span class="line">array_unshift(<span class="keyword">array</span>, elements);     <span class="comment">//向数组头部添加元素</span></span><br><span class="line">array_rand(<span class="keyword">array</span>, n);      <span class="comment">//从数组中随机选出n个元素，默认为1</span></span><br></pre></td></tr></table></figure><br /><h2 id="三、前后端交互"><a href="#三、前后端交互" class="headerlink" title="三、前后端交互"></a>三、前后端交互</h2><ol><li>jQuery发起get/post请求</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loginSend</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&quot;#login-button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                type: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">                url: <span class="string">&quot;./php/login.php&quot;</span>,</span><br><span class="line">                data: &#123;</span><br><span class="line">                    username: $(<span class="string">&quot;#username&quot;</span>).val(),</span><br><span class="line">                    password: $(<span class="string">&quot;#password&quot;</span>).val()</span><br><span class="line">                &#125;,</span><br><span class="line">                success: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(result);</span><br><span class="line">                &#125;,</span><br><span class="line">                error: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>PHP处理请求，并返回结果<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    header(<span class="string">&#x27;content:text/html;charset=&quot;utf-8&quot;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统一返回数据格式</span></span><br><span class="line">    $responseData = <span class="keyword">array</span>(<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">0</span>,<span class="string">&#x27;message&#x27;</span>=&gt;<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//接收前端数据</span></span><br><span class="line">    $username = $_POST[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    $passward = $_POST[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//验证表单</span></span><br><span class="line">    <span class="keyword">if</span>(!$username)&#123;</span><br><span class="line">        $responseData[<span class="string">&#x27;code&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">        $responseData[<span class="string">&#x27;message&#x27;</span>] = <span class="string">&quot;用户名不能为空&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> json_encode($responseData);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!$passward)&#123;</span><br><span class="line">        $responseData[<span class="string">&#x27;code&#x27;</span>] = <span class="number">2</span>;</span><br><span class="line">        $responseData[<span class="string">&#x27;message&#x27;</span>] = <span class="string">&quot;密码不能为空&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> json_encode($responseData);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//连接数据库</span></span><br><span class="line">    $link = mysql_connect(<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否连接成功</span></span><br><span class="line">    <span class="keyword">if</span>(!$link)&#123;</span><br><span class="line">        $responseData[<span class="string">&#x27;code&#x27;</span>] = <span class="number">3</span>;</span><br><span class="line">        $responseData[<span class="string">&#x27;message&#x27;</span>] = <span class="string">&quot;数据库连接失败&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> json_encode($responseData);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置字符集</span></span><br><span class="line">    mysql_set_charset(<span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//选择数据库</span></span><br><span class="line">    mysql_select_db(<span class="string">&#x27;yyy&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//MD5加密</span></span><br><span class="line">    $str = md5(md5(md5($passward).<span class="string">&quot;zhongguo&quot;</span>).<span class="string">&quot;guangzhou&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//准备SQL语句</span></span><br><span class="line">    $sql = <span class="string">&quot;SELECT * FROM users WHERE username = &#x27;&#123;$username&#125;&#x27; AND password = &#x27;&#123;$str&#125;&#x27;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//发送SQL语句</span></span><br><span class="line">    $res = mysql_query($sql);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理结果</span></span><br><span class="line">    $row = mysql_fetch_assoc($res);</span><br><span class="line">    <span class="keyword">if</span>(!$row)&#123;</span><br><span class="line">        $responseData[<span class="string">&#x27;code&#x27;</span>] = <span class="number">4</span>;</span><br><span class="line">        $responseData[<span class="string">&#x27;message&#x27;</span>] = <span class="string">&quot;用户名或密码错误&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> json_encode($responseData);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $responseData[<span class="string">&#x27;message&#x27;</span>] = <span class="string">&quot;登陆成功&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> json_encode($responseData);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭数据库</span></span><br><span class="line">    mysql_close($link);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、入门&quot;&gt;&lt;a href=&quot;#一、入门&quot; class=&quot;headerlink&quot; title=&quot;一、入门&quot;&gt;&lt;/a&gt;一、入门&lt;/h2&gt;&lt;h5 id=&quot;1-输出语句&quot;&gt;&lt;a href=&quot;#1-输出语句&quot; class=&quot;headerlink&quot; title=&quot;1.输出语
      
    
    </summary>
    
    
    
      <category term="PHP" scheme="https://Lorien.github.io/tags/PHP/"/>
    
  </entry>
  
</feed>
