{"meta":{"title":"夏心瑶的个人网站","subtitle":"Lorien's Web","description":"Web前端开发工程师","author":"夏心瑶","url":"https://Lorien.github.io","root":"/"},"pages":[{"title":"tags","date":"2020-08-08T02:27:58.000Z","updated":"2020-08-14T13:13:40.507Z","comments":false,"path":"tags/index.html","permalink":"https://lorien.github.io/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-08-08T02:28:43.000Z","updated":"2020-08-08T02:28:54.656Z","comments":false,"path":"categories/index.html","permalink":"https://lorien.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-08-14T13:00:45.000Z","updated":"2020-08-14T14:18:17.764Z","comments":false,"path":"link/index.html","permalink":"https://lorien.github.io/link/index.html","excerpt":"","text":""}],"posts":[{"title":"React开发规范","slug":"react-standard","date":"2020-08-14T12:34:48.000Z","updated":"2020-08-14T12:43:01.051Z","comments":true,"path":"2020/08/14/react-standard/","link":"","permalink":"https://lorien.github.io/2020/08/14/react-standard/","excerpt":"","text":"组件的定义 需要管理内部状态/涉及生命周期，使用class（类组件） 否则优先使用普通函数（函数组件） 命名 规则：帕斯卡命名法 文件名 目录的根组件：index.jsx 其它：MyComponent.jsx 引用组件名：const MyComponent = require(&#39;./List&#39;) 属性名 规则：驼峰式 例：&lt;Index firstName=&quot;foo&quot;&gt; 对齐1234&lt;Index config=&quot;foo&quot; second=&quot;bar&quot;/&gt; 引号 在JSX中应使用&quot;&quot; 在JS中应使用&#39;&#39; 1&lt;Index name=&quot;EvanYou&quot; style=&#123;&#123;left: &#x27;20px&#x27;&#125;&#125; /&gt; 空格 标签闭合：标签名和/中保留一个空格 &lt;Index /&gt; 插值表达式：插值括号和内容之间不应该有空格 &lt;Index style=&#123;styleObj&#125;&gt; props123456789101112131415161718import React, &#123; PropTypes &#125; from &#x27;react&#x27;const propTypes = &#123; id: PropTypes.number.isRequired, text: PropTypes.string&#125;const defaultProps = &#123; text: &#x27;hello, world!&#x27;&#125;class App extends React.component &#123; render () &#123; return ( &lt;div class=&quot;index&quot;&gt;&#123;this.props.text&#125;&lt;/div&gt; ) &#125;&#125;App.propTypes = propTypesApp.defaultTypes = propTypesexport default App","categories":[],"tags":[{"name":"React","slug":"React","permalink":"https://lorien.github.io/tags/React/"}]},{"title":"React Hook","slug":"react-hook","date":"2020-08-14T12:34:37.000Z","updated":"2020-08-14T12:42:57.709Z","comments":true,"path":"2020/08/14/react-hook/","link":"","permalink":"https://lorien.github.io/2020/08/14/react-hook/","excerpt":"","text":"特点只能在函数式组件中使用 作用使函数式组件拥有状态、生命周期等类组件的特性 核心 state hook 123456789101112131415161718192021222324252627import React, &#123; useState &#125; form &#x27;react&#x27;// useState 方法返回一个数组。第一个值是当前的 state，第二个值是更新 state 的函数，相当于类组件的setStatefunction App() &#123; const [data, setData] = useState(&#123; name: &#x27;xxy&#x27;, age: 10 &#125;) return ( &lt;div&gt; &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt; &lt;button onClick=&#123;() =&gt; setData(&#123; ...data, age: data.age + 1 &#125;)&#125;&gt;点我加1&lt;/button&gt; &lt;/div&gt; )&#125;/* 【注意】setData的使用分两种情况： * 1.为该状态赋新的值 * 2.在原状态的基础上进行修改。此时setData接收一个参数data，表示原来的状态 */ setData(&#x27;&#x27;) setData(data =&gt; [...data, text]) setData(data =&gt; &#123; const arr = [...data] arr.splice(i, 1) return arr &#125;) effect hook 123456789101112131415161718import React, &#123; useState, useEffect &#125; from &#x27;react&#x27;/* useEffect第一个参数为处理函数,在。函数返回值(如果有)在组件销毁时调用; * 第二个参数（可选）是数组 1.若不传，则函数在初次渲染和每次更新后都会调用，相当于componentDidUpdate 2.若为[var],当var发生变化时才会触发useEffect，相当于watch 3.若为[]，则函数只在组件挂载和卸载时调用，相当于componentDidMount */function App() &#123; const [count, setCount] = useState(0); useEffect(() =&gt; &#123; console.log(&#x27;componentDidMount...&#x27;) console.log(&#x27;componentDidUpdate...&#x27;) return () =&gt; &#123; console.log(&#x27;componentWillUnmount...&#x27;) &#125; &#125;) return &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;点我加1&lt;/button&gt;&#125;","categories":[],"tags":[{"name":"React","slug":"React","permalink":"https://lorien.github.io/tags/React/"}]},{"title":"Vue开发规范","slug":"vue-standard","date":"2020-08-14T12:32:43.000Z","updated":"2020-08-14T12:43:10.006Z","comments":true,"path":"2020/08/14/vue-standard/","link":"","permalink":"https://lorien.github.io/2020/08/14/vue-standard/","excerpt":"","text":"组件划分 情况 App组件代码超过100行 使用了vue-router 原则：尽量保证单文件组件代码不超过100行 组件命名 原则 语义化 由2~3个单词组成 使用-分隔单词 组件事件命名 原则 同组件命名 应以动词/名词结尾，例如upload-success props 尽量传递JS原始类型（String, Number, Boolean）和Function，避免传递对象 123456789101112&lt;!-- 推荐 --&gt;&lt;range-slider :values&#x3D;&quot;[10, 20]&quot; :min&#x3D;&quot;0&quot; :max&#x3D;&quot;100&quot; :step&#x3D;&quot;5&quot; @on-slide&#x3D;&quot;updateInputs&quot; @on-end&#x3D;&quot;updateResults&quot;&gt;&lt;&#x2F;range-slider&gt;&lt;!-- 避免 --&gt;&lt;range-slider :config&#x3D;&quot;complexConfigObject&quot;&gt;&lt;&#x2F;range-slider&gt; 提供默认值，并使用type校验属性 12345678910111213141516export default &#123; props: &#123; id: &#123; type: Number, default() &#123; return 10; &#125;, &#125;, title: &#123; type: String, default() &#123; return &#x27;&#x27;; &#125;, &#125;, content: &#123; type: String, default() &#123; return &#x27;&#x27;; &#125;, &#125;, &#125;&#125; 组件结构化 属性顺序：name,extends,props,data,computed,components,watch,methods,lifecycle methods CSS使用BEM命名规范 123456.list &#123; .list__item &#123; .list__item--active &#123; &#125; &#125;&#125;","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://lorien.github.io/tags/Vue/"}]},{"title":"我的开发笔记","slug":"my-note","date":"2020-08-14T12:24:19.000Z","updated":"2020-08-14T12:34:24.090Z","comments":true,"path":"2020/08/14/my-note/","link":"","permalink":"https://lorien.github.io/2020/08/14/my-note/","excerpt":"","text":"序言在项目实际开发的过程中，可能会遇到许许多多的问题，在此做一个简单的记录。 HTML1.元素特性的顺序 id,class,ref 节点标识 name,src,alt,type,href,value 必须的原生特性 placeholder 可选的原生特性 v-model,v-for,key,v-if,v-show,v-bind vue指令 CSS1.PC端页面适配 缩放页面时，背景和主体元素总是保持居中 实际宽度小于设计宽度时，根据主体元素宽度设置页面最小宽度 实际宽度大于设计宽度时，使用与背景色相近的纯色填充空白部分 1234567891011121314html, body &#123; background: #fff;&#125;.index &#123; min-width: 1200px; background: url(~img/bg.jpg) no-repeat; background-position: center 0; .content &#123; margin: 0 auto; &#125;&#125; 3.移动端伪类:active无效的解决方式123created () &#123; document.body.addEventListener(&#x27;touchstart&#x27;, function()&#123;&#125;)&#125; JavaScript1.获取对象的第一个属性 原理：JS的对象是基于哈希表实现的，理论上是无序的，但其存储结构是有序的 方法：使用for...in循环 12345678let obj = &#123; &#x27;0722&#x27;: &#123;...&#125;, &#x27;0814&#x27;: &#123;...&#125;&#125;for (let key in obj) &#123; console.log(obj[key]) // &#x27;0722&#x27;: &#123;...&#125; break&#125; Vue1.computed计算属性无法传参的解决方式1234567computed: &#123; myOrder () &#123; return function (num) &#123; return &#x27;0&#x27; + num &#125; &#125;&#125; React1.setState后获取更新后的状态12345this.setState(&#123; isShow: true&#125;, () =&gt; &#123; console.log(this.state.isShow)&#125;) Git1.git commit的注释规范 feat 新功能 fix 修补bug docs 文档 style 格式 refactor 重构","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://lorien.github.io/tags/JavaScript/"},{"name":"HTML","slug":"HTML","permalink":"https://lorien.github.io/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"https://lorien.github.io/tags/CSS/"},{"name":"Vue","slug":"Vue","permalink":"https://lorien.github.io/tags/Vue/"},{"name":"React","slug":"React","permalink":"https://lorien.github.io/tags/React/"},{"name":"Git","slug":"Git","permalink":"https://lorien.github.io/tags/Git/"}]},{"title":"JavaScript实现常见排序算法","slug":"js-sort","date":"2020-08-14T12:22:06.000Z","updated":"2020-08-14T12:42:53.596Z","comments":true,"path":"2020/08/14/js-sort/","link":"","permalink":"https://lorien.github.io/2020/08/14/js-sort/","excerpt":"","text":"本文实现的排序算法有：冒泡排序、选择排序、插入排序、希尔排序、快速排序。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125function ArrayList() &#123; // 列表的属性 this.array = [] // 列表的方法 // - 插入项 ArrayList.prototype.insert = function (item) &#123; this.array.push(item) &#125; // - 将列表以字符串形式返回 ArrayList.prototype.toString = function () &#123; return this.array.join(&#x27; &#x27;) &#125; // 排序算法 // - 冒泡排序 ArrayList.prototype.bubbleSort = function () &#123; var length = this.array.length for (let j = length - 1; j &gt;= 0; j--) &#123; for (let i = 0; i &lt; j; i++) &#123; if (this.array[i] &gt; this.array[i + 1]) &#123; this.swap(i, i + 1) &#125; &#125; &#125; &#125; // - 选择排序 ArrayList.prototype.selectionSort = function () &#123; var length = this.array.length for (let j = 0; j &lt; length - 1; j++) &#123; var min = j for (let i = min + 1; i &lt; length; i++) &#123; // 从第二个元素，即arr[1]开始与arr[min]比较 if (this.array[i] &lt; this.array[min]) &#123; min = i &#125; &#125; this.swap(j, min) &#125; &#125; // - 插入排序 ArrayList.prototype.insertionSort = function () &#123; var length = this.array.length for (let i = 1; i &lt; length; i++) &#123; var cur = this.array[i] var j = i // 这里不用j = i - 1是因为其在不进行循环的情况会出错 while (cur &lt; this.array[j - 1] &amp;&amp; j &gt; 0) &#123; this.array[j] = this.array[j - 1] j-- &#125; this.array[j] = cur &#125; &#125; // - 希尔排序 ArrayList.prototype.shellSort = function () &#123; var length = this.array.length var gap = length / 2 | 0 // 初始化增量gap while (gap &gt;= 1) &#123; // 以gap作为间隔，对数据进行分组，组内进行插入排序 for (let i = gap; i &lt; length; i++) &#123; var cur = this.array[i] var j = i while (cur &lt; this.array[j - gap] &amp;&amp; j &gt; gap - 1) &#123; this.array[j] = this.array[j - gap] j -= gap &#125; this.array[j] = cur &#125; gap = gap / 2 | 0 // 按照N/2逐步减小增量 &#125; &#125; // - 快速排序 ArrayList.prototype.quickSort = function () &#123; this.quick(0, this.array.length - 1) &#125; // - 快速排序的递归函数 ArrayList.prototype.quick = function (left, right) &#123; if (left &gt;= right) return // 结束条件 var pivot = this.median(left, right) // 获取枢纽 var i = left // 左指针（默认指向首项） var j = right - 1 // 右指针（默认指向倒数第二项） while (i &lt; j) &#123; // true =&gt; i &lt; j，修复了第一轮循环出现i=j的bug while (this.array[++i] &lt; pivot) &#123; &#125; // 左指针向右移动，直到找到大于枢纽的元素 while (this.array[--j] &gt; pivot) &#123; &#125; // 右指针向左移动，直到找到小于枢纽的元素 if (i &gt;= j) &#123; break // 左指针和右指针重合时退出循环 &#125; else &#123; this.swap(i, j) // 交换左右指针指向的元素 &#125; &#125; this.swap(i, right - 1) // 左指针i停留的位置即枢纽在序列中正确的位置 this.quick(left, i - 1) // 对枢纽左边的序列再次进行快速排序 this.quick(i + 1, right) // 对枢纽右边的序列再次进行快速排序 &#125; // - 交换元素 ArrayList.prototype.swap = function (m, n) &#123; [this.array[m], this.array[n]] = [this.array[n], this.array[m]] &#125; // - 获取中位数并作为枢纽返回（快速排序） ArrayList.prototype.median = function (left, right) &#123; var center = (left + right) / 2 | 0 if (this.array[left] &gt; this.array[center]) &#123; this.swap(left, center) &#125; if (this.array[left] &gt; this.array[right]) &#123; this.swap(left, right) &#125; if (this.array[center] &gt; this.array[right]) &#123; this.swap(center, right) &#125; this.swap(center, right - 1) return this.array[right - 1] &#125;&#125;// 使用排序算法var list = new ArrayList()list.insert(97)list.insert(35)list.insert(12)list.insert(9)list.insert(20)list.insert(66)list.insert(77)list.insert(45)list.insert(2)list.insert(6)list.quickSort()alert(list.toString())","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://lorien.github.io/tags/JavaScript/"},{"name":"算法","slug":"算法","permalink":"https://lorien.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"我的Web项目汇总","slug":"my-project","date":"2020-08-14T12:18:28.000Z","updated":"2020-08-25T11:17:07.445Z","comments":true,"path":"2020/08/14/my-project/","link":"","permalink":"https://lorien.github.io/2020/08/14/my-project/","excerpt":"","text":"欢聚时代 YY陪玩·年中金牌团队大赏专题页（PC）https://web.yy.com/pw_gh_cosme/index.html?actId=20200810 YY交友·豆荚明星赛专题页（PC）https://web.yy.com/bean_star/ 追玩app·王者荣耀争霸赛专题页（PC）https://web.yy.com/ge_group_red_packet/ 追玩app·云顶之弈赛事专题页（mobile）https://web.yy.com/ge_zw_kingofchess/august.html 追玩app·七月导量活动专题页（mobile）https://web.yy.com/zw_migration/ 追玩app·后台管理系统·游戏专区（PC） 追玩app·后台管理系统·群红包发放后台（PC） 在校 MyVue - 基于Vue.js的前端项目工程 https://github.com/Lorienn/myvue 天气通 - 基于Vue的移动端Web应用 https://github.com/Lorienn/Weather 一本日记 - 基于uni-app开发的微信小程序 https://github.com/Lorienn/one-daily 猫眼电影数据可视化平台 - 基于Vue的PC端Web应用 https://github.com/Lorienn/maoyan-film Element管理系统 - 基于Vue的电商后台管理系统 https://github.com/Lorienn/ecommerce-management-system 小米商城 - 基于HTML+CSS+JavaScript的PC端Web网站 https://github.com/Lorienn/xiaomi 漫漫记单词 - 基于HTML+CSS+JavaScript的教育类Web应用 知乎·登录 - 纯HTML+CSS3实现的Web页面 https://github.com/Lorienn/zhihu Tick Tick - 基于Vue的to-do类移动端Web应用 https://github.com/Lorienn/Tick-Tick","categories":[],"tags":[]},{"title":"五分钟入门PHP5.6","slug":"php5","date":"2020-08-12T04:18:25.000Z","updated":"2020-08-14T13:40:27.011Z","comments":true,"path":"2020/08/12/php5/","link":"","permalink":"https://lorien.github.io/2020/08/12/php5/","excerpt":"","text":"一、入门1.输出语句123echo echo(); // 常用输出语句print_r(); // 同上var_dump(); // 输出时变量类型和值，用于代码调试 注意：php的语法十分严格，每一条语句都必须以分号结束。 2.变量1$str = &quot;hello,world.&quot;; //声明变量无需关键字 变量以$符号开头（引用变量时也要带上$）变量名必须以字母或下划线开头变量名只能由[0-9a-zA-Z\\_]组成变量名区分大小写 3. 数据类型String（字符串）, Integer（整型）, Float（浮点型）, Boolean（布尔型）, Array（数组）, Object（对象）, NULL（空值） 4. 字符串拼接123//JavaScriptstr = &quot;0&quot; + &quot;1&quot;; //字符串拼接str = `Hello, $&#123;name&#125;.`; //模板字符串 123//PHP$str = &quot;0&quot;.&quot;1&quot;; //字符串拼接$str = &quot;Hello, &#123;$name&#125;!&quot;; //占位符 5. 分支语句if,switch,for语句以及函数定义皆同js 二、数组1.分类 索引数组（下标为数字） 声明1$cars = array(&quot;大众&quot;, &quot;宝马&quot;, &quot;现代&quot;); 遍历123for($i = 0; $i &lt; count($cars); $i++)&#123; echo &quot;下标:&#123;$i&#125;，数据:&#123;$cars[$i]&#125;&lt;br /&gt;&quot;;&#125; 关联数组（又名键值数组，下标为字符串，类似ES6的map数据类型） 声明1$arr = array(&quot;id&quot; =&gt; 1, &quot;name&quot; =&gt; &quot;晓明&quot;, &quot;age&quot; =&gt; &quot;30&quot;); 遍历123foreach($arr as $key =&gt; $value)&#123; echo &quot;下标:&#123;$key&#125;，数据:&#123;$value&#125;&lt;br /&gt;&quot;;&#125; 全局数组$_GET：通过get方法提交过来的所有数据$_POST：通过get方法提交过来的所有数据 2.方法123456count(array); //返回数组长度array_pop(array); //从数组末尾取下一个元素array_push(array, elements); //向数组末尾添加元素array_shift(array); //从数组头部取下一个元素array_unshift(array, elements); //向数组头部添加元素array_rand(array, n); //从数组中随机选出n个元素，默认为1 三、前后端交互 jQuery发起get/post请求 123456789101112131415161718function loginSend() &#123; $(&quot;#login-button&quot;).click(function () &#123; $.ajax(&#123; type: &quot;post&quot;, url: &quot;./php/login.php&quot;, data: &#123; username: $(&quot;#username&quot;).val(), password: $(&quot;#password&quot;).val() &#125;, success: function (result) &#123; console.log(result); &#125;, error: function (msg) &#123; console.log(msg); &#125; &#125;) &#125;) &#125; PHP处理请求，并返回结果1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&lt;?php header(&#x27;content:text/html;charset=&quot;utf-8&quot;&#x27;); // 统一返回数据格式 $responseData = array(&#x27;code&#x27;=&gt;0,&#x27;message&#x27;=&gt;&#x27;&#x27;); //接收前端数据 $username = $_POST[&#x27;username&#x27;]; $passward = $_POST[&#x27;password&#x27;]; //验证表单 if(!$username)&#123; $responseData[&#x27;code&#x27;] = 1; $responseData[&#x27;message&#x27;] = &quot;用户名不能为空&quot;; echo json_encode($responseData); exit; &#125; if(!$passward)&#123; $responseData[&#x27;code&#x27;] = 2; $responseData[&#x27;message&#x27;] = &quot;密码不能为空&quot;; echo json_encode($responseData); exit; &#125; //连接数据库 $link = mysql_connect(&#x27;localhost&#x27;,&#x27;root&#x27;,&#x27;123456&#x27;); //判断是否连接成功 if(!$link)&#123; $responseData[&#x27;code&#x27;] = 3; $responseData[&#x27;message&#x27;] = &quot;数据库连接失败&quot;; echo json_encode($responseData); exit; &#125; //设置字符集 mysql_set_charset(&#x27;utf8&#x27;); //选择数据库 mysql_select_db(&#x27;yyy&#x27;); //MD5加密 $str = md5(md5(md5($passward).&quot;zhongguo&quot;).&quot;guangzhou&quot;); //准备SQL语句 $sql = &quot;SELECT * FROM users WHERE username = &#x27;&#123;$username&#125;&#x27; AND password = &#x27;&#123;$str&#125;&#x27;&quot;; //发送SQL语句 $res = mysql_query($sql); //处理结果 $row = mysql_fetch_assoc($res); if(!$row)&#123; $responseData[&#x27;code&#x27;] = 4; $responseData[&#x27;message&#x27;] = &quot;用户名或密码错误&quot;; echo json_encode($responseData); exit; &#125;else&#123; $responseData[&#x27;message&#x27;] = &quot;登陆成功&quot;; echo json_encode($responseData); &#125; //关闭数据库 mysql_close($link);?&gt;","categories":[],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://lorien.github.io/tags/PHP/"}]}],"categories":[],"tags":[{"name":"React","slug":"React","permalink":"https://lorien.github.io/tags/React/"},{"name":"Vue","slug":"Vue","permalink":"https://lorien.github.io/tags/Vue/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://lorien.github.io/tags/JavaScript/"},{"name":"HTML","slug":"HTML","permalink":"https://lorien.github.io/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"https://lorien.github.io/tags/CSS/"},{"name":"Git","slug":"Git","permalink":"https://lorien.github.io/tags/Git/"},{"name":"算法","slug":"算法","permalink":"https://lorien.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"PHP","slug":"PHP","permalink":"https://lorien.github.io/tags/PHP/"}]}